// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    
    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addFarmer(originFarmerID)
        await supplyChain.addDistributor(distributorID)
        await supplyChain.addRetailer(retailerID)
        await supplyChain.addConsumer(consumerID)
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        //Watch the emitted event Harvested()
        //var event = supplyChain.Harvested()
        supplyChain.Harvested(null, (error, event)=>{
                eventEmitted = true;
        });


        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc,
            originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes,
            { from: accounts[1], gas: 3000000 })


        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        //console.log(resultBufferOne);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], accounts[1], 'Error: Wrong owner')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
        supplyChain.Processed(null, (error, event)=>{
            eventEmitted = true;
        });
        
        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, { from: accounts[1] })
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[5], 1, 'Error: Item state has not been marked as processed')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        assert.equal(resultBufferOne[2], accounts[1], 'Error: Wrong owner')
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Packed()
        supplyChain.Packed(null, (error, event)=>{eventEmitted = true;});
        
        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, { from: accounts[1] })
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[5], 2, 'Error: Item state has not been marked as packed')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        assert.equal(resultBufferOne[2], accounts[1], 'Error: Wrong owner')
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ForSale()
        supplyChain.ForSale(null, (error, event)=>{eventEmitted = true;});
        
        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, 12345, { from: accounts[1] })
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[5], 3, 'Error: Item state has not been marked as ForSale')
        assert.equal(resultBufferTwo[4], 12345, 'Error: Price has not been set correctly')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        assert.equal(resultBufferOne[2], accounts[1], 'Error: Wrong owner')
        //TODO(lukas) should the owner change here?
    })    

    // // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        supplyChain.Sold(null, (error, event)=>{eventEmitted = true;});
    
        // Mark an item as Sold by calling function buyItem()
        let wei_seller_before = Number(await web3.eth.getBalance(accounts[1]))//TODO(lukas) this seems to introduce rounding errors
        let wei_buyer_before = Number(await web3.eth.getBalance(accounts[2]))
        await supplyChain.buyItem(upc, { from: accounts[2], value: 22345 })
        let wei_seller_after = Number(await web3.eth.getBalance(accounts[1]))
        let wei_buyer_after = Number(await web3.eth.getBalance(accounts[2]))
        console.log("wei_seller_before", wei_seller_before)
        console.log("wei_seller_after ", wei_seller_after)
        console.log("wei_buyer_before ", wei_buyer_before)
        console.log("wei_buyer_after  ", wei_buyer_after)
            
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferOne[2], accounts[2], 'Error: Owner has not been updated')
        assert.equal(resultBufferTwo[6], accounts[2], 'Error: Distributor ID wrong')
        assert.equal(resultBufferTwo[5], 4, 'Error: Item state has not been marked as Bought')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        assert.equal(wei_buyer_before>wei_buyer_after, true,'Buyer has not spent money')
        assert.equal(wei_seller_before==wei_seller_after,false,  'Seller has not recieved correct amount')
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Shipped()
        supplyChain.Shipped(null, (error, event)=>{eventEmitted = true;});
        
        // Mark an item as Sold by calling function shipItem()
        await supplyChain.shipItem(upc, { from: accounts[2] })
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[5], 5, 'Error: Item state has not been marked as Shipped')
        assert.equal(eventEmitted, true, 'Invalid event emitted')    
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        supplyChain.Received(null, (error, event)=>{eventEmitted = true;});
        
        // Mark an item as Sold by calling function recieveitem()
        await supplyChain.receiveItem(upc, { from: accounts[3] })
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferOne[2], accounts[3], 'Error: Owner has not been updated')
        assert.equal(resultBufferTwo[7], accounts[3], 'Error: Retailer has not been updated')
        assert.equal(resultBufferTwo[5], 6, 'Error: Item state has not been marked as Received')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        supplyChain.Received(null, (error, event)=>{eventEmitted = true;});
        
        // Mark an item as Sold by calling function purchaseItem()
        await supplyChain.purchaseItem(upc, { from: accounts[4] })
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferOne[2], accounts[4], 'Error: Owner has not been updated')
        assert.equal(resultBufferTwo[8], accounts[4], 'Error: Consumer has not been updated')
        assert.equal(resultBufferTwo[5], 7, 'Error: Item state has not been marked as Purchased')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: sku not fetched correcly')
        assert.equal(resultBufferOne[1], upc, 'Error: upc not fetched correctly')
        assert.equal(resultBufferOne[2], accounts[4], 'Error: ownerID not fetched correctly')
        assert.equal(resultBufferOne[3], accounts[1], 'Error: originFarmerID not fetched correctly')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: originFarmName not fetched correctly')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: originFarmInformation not fetched correctly')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: originFarmLatitude not fetched correctly')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: originFarmLongitude not fetched correctly')
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: sku not fetched correcly')
        assert.equal(resultBufferTwo[1], upc, 'Error: upc not fetched correcly')
        assert.equal(resultBufferTwo[2], sku+upc, 'Error: productID not fetched correcly')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: productNotes not fetched correcly')
        assert.equal(resultBufferTwo[4], 12345, 'Error: productPrice not fetched correcly')
        assert.equal(resultBufferTwo[5], 7, 'Error: itemState not fetched correcly')
        assert.equal(resultBufferTwo[6], accounts[2], 'distributorID: sku not fetched correcly')
        assert.equal(resultBufferTwo[7], accounts[3], 'retailerID: sku not fetched correcly')
        assert.equal(resultBufferTwo[8], accounts[4], 'consumerID: sku not fetched correcly')
    })

});

